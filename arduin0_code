// Code for soccer playing robots. Written by Ryan Gray.
// A raspberry pi pulls information from a server and sends this info to the arduino. The arduino will use this information to play soccer. 
// The arduino will be receiving information using SPI form by way of the NRF24L01 transceiver.

//#include<math.h>

// libraries for RF

#include<SPI.h>
#include<RF24.h>

// global variables

byte Ball_x = 0;
byte Ball_y = 0;

//-------------------------------- our team

byte Self_x = 0;
byte Self_y = 0;

byte Other_x = 0;
byte Other_y = 0;

byte goalie_x = 0;
byte goalie_y = 0;

//-------------------------------- opposite team

byte Op_circ_x = 0;
byte Op_circ_y = 0;

byte Op_sqr_x = 0;
byte Op_sqr_y = 0;

byte Op_tri_x = 0;
byte Op_tri_y = 0;

//-------------------------------- 

int Last_x = 0;
int Last_y = 0;
int distance_S = 0;
int distance_O = 0;
int state = 0;
unsigned long update_t = 0;
int n = 1;
int turning_f = 0;
int moving_f = 0;
unsigned long rot_time = 0;
unsigned long t = 0;
int current_degree = 0;

// pins for RF Comm.

RF24 radio(9,10);

// pins for motor control

const int IN1 = 7;
const int IN2 = 6;
const int IN3 = 8;
const int IN4 = 4;

const int ENA = 5;
const int ENB = 3;
bool shit = 1;

void setup() {
  // set baud rate for serial monitor and a seed for coordinate generation
  while(!Serial);
  Serial.begin(9600);

  // setup for RF
  radio.begin();
  radio.setPALevel(RF24_PA_MAX);
  radio.setChannel(0x76);
  radio.setDataRate(RF24_1MBPS);
  radio.openWritingPipe(0xF0F0F0F0E1LL);
  const uint64_t pipe = (0xE8E8F0F0E1LL);
  radio.openReadingPipe(1, pipe);

  radio.enableDynamicPayloads();
  radio.powerUp();
  radio.startListening();

  // motor setup

  pinMode (IN1, OUTPUT);
  pinMode (IN2, OUTPUT);
  pinMode (IN3, OUTPUT);
  pinMode (IN4, OUTPUT);
  pinMode (ENA, OUTPUT);
  pinMode (ENB, OUTPUT);
  pinMode (A5, INPUT);
  digitalWrite(ENA, HIGH);
  digitalWrite(ENB, HIGH);
}

void loop() {

//----------------------------------------------------------------------------------------------------------
// receiving the coordinate data
    // example for receiving data
    //char receivedMessage[32] = {0};
    byte receivedMessage[32] = {0};
    if(radio.available()){
      radio.read(receivedMessage, radio.getDynamicPayloadSize());
 //     Serial.println((byte)(receivedMessage));
    for (int i = 0; i < radio.getDynamicPayloadSize(); i++) {
      Serial.print(byte(receivedMessage[i]));
      Serial.print(" ");
    }

     Last_x = Self_x;
     Last_y = Self_y;

     Ball_x = receivedMessage[0];
     Ball_y = receivedMessage[1];

     Self_x = receivedMessage[2];
     Self_y = receivedMessage[3];

     goalie_x = receivedMessage[4];
     goalie_y = receivedMessage[5];

     Other_x = receivedMessage[6];
     Other_y = receivedMessage[7];

     Op_circ_x = receivedMessage[8];
     Op_circ_y = receivedMessage[9];

     Op_sqr_x = receivedMessage[10];
     Op_sqr_y = receivedMessage[11];

     Op_tri_x = receivedMessage[12];
     Op_tri_y = receivedMessage[13];

  }
  if (shit == 1) {
    Last_x = Self_x-10;
    Last_y = Self_y;
    shit = 0;
  }

  
//--------------------------------------------------------------------------------------
// using coordinate data to determine states of action

    rot_time = RotateTime(Last_x, Last_y, Self_x, Self_y, Ball_x, Ball_y);

    distance_S = BallDistance(Ball_x, Ball_y, Self_x, Self_y);
    distance_O = BallDistance(Ball_x, Ball_y, Other_x, Other_y);

    // uses distance-to-the-ball to tell rover what to do
    
    if ((distance_S < distance_O)){
      state = 1;
      turning_f = 1;
      moving_f = 0;
    }
    else if ((distance_S > distance_O)){
//      state = 2;
        state = 0;
    }

//--------------------------------------------------------------------------------------

Serial.println(state);

// executing states

    if (state == 0){
      // stop moving

      digitalWrite(IN1, LOW);
      digitalWrite(IN2, LOW);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, LOW);
    }

//----------------- state 1
    
    else if (state == 1){
      // face towards ball and approach it
      
      while (turning_f == 1){
            // rotate towards ball

              if (Ball_y > Self_y){
              Serial.println("turning");
              digitalWrite(IN1, HIGH);
              digitalWrite(IN2, LOW);
              digitalWrite(IN3, HIGH);
              digitalWrite(IN4, LOW);
                }
              else{
              Serial.println("turning");
              digitalWrite(IN1, LOW);
              digitalWrite(IN2, HIGH);
              digitalWrite(IN3, LOW);
              digitalWrite(IN4, HIGH);
                }
                  
              delay(rot_time*1000);

              turning_f = 0;
              moving_f = 1;
              
              digitalWrite(IN1, LOW);
              digitalWrite(IN2, LOW);
              digitalWrite(IN3, LOW);
              digitalWrite(IN4, LOW);

              

       }
     while (moving_f == 1){
            // move towards ball
            int mve = 0;

      while (mve <= 100){

        Serial.println("Moving towards ball");
        mve++;
      
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, HIGH);
            
        moving_f = 0;
//        state = 3;

            }

        digitalWrite(IN1, LOW);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, LOW);
        digitalWrite(IN4, LOW);
          
     }
    }
//----------------- state 2

    else if (state == 2){
      // face towards predicted ball location and move to "catch" it
     // Serial.println("Turning and positioning");

      while (turning_f == 1){

              
            
//              if ( (time_current - t) <= rot_time){
//                digitalWrite(IN1, HIGH);
//                digitalWrite(IN2, LOW);
//                digitalWrite(IN3, HIGH);
//                digitalWrite(IN4, LOW);
//                }
//              else{
//              turning_f = 0;
//              }
//      }
     while (moving_f == 1){
            // move towards ball
//            if (rover is within certain distance from ball){
//              moving_f = 0;
//              state = 3;
//            }
     } 
      }
    }

//----------------- state 3
    
    else if (state == 3){
      // kick the ball
      Serial.println("kicking ball");
    } 
}
//-------------------------------end of main loop---------------------------------------------------------

 // calculates distance between ball and given object
int BallDistance(int B_x, int B_y, int x, int y) {
    int distance_f = 0;
    distance_f  = sqrt(sq(Ball_x - x) + sq(Ball_y - y));
    return distance_f;
}

// find angle to turn towards ball
double RotateTime(int L_x, int L_y, int S_x, int S_y, int B_x, int B_y ){
  
       double deg;
       double dotP;
       double magLS;
       double magBS;
       double turn_time;

       double LSvect_x = 0; 
       double LSvect_y = 0; 

       double BSvect_x = 0; 
       double BSvect_y = 0; 
       
       LSvect_x = L_x - S_x; 
       LSvect_y = L_y - S_y; 

       BSvect_x = B_x - S_x; 
       BSvect_y = B_y - S_y; 

       dotP = (LSvect_x*BSvect_x) + (LSvect_y*BSvect_y);

       magLS = sqrt(sq(LSvect_x) + sq(LSvect_y));
       magBS = sqrt(sq(BSvect_x) + sq(BSvect_y));

       deg = (acos(dotP/(magLS*magBS)))*(180/PI);
       Serial.print("Turn ");
       Serial.print(deg);
       Serial.println(" degrees");
       if(deg < 10) {
        return 0;
       }
       else {
        turn_time = (((180-deg)*2.19)/(360))+2.19;
       }
       Serial.println("Time to turn: ");
       Serial.println(turn_time);
       return turn_time;
}



